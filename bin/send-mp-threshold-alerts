#!/usr/bin/php -q
<?php
/*
 * send-mp-threshold-alerts:
 * Run from cron regularly to send MPs who have never sent a mail through YCML
 * messages telling them how many users are signed up in their constituency.
 * 
 * Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
 * Email: chris@mysociety.org; WWW: http://www.mysociety.org/
 *
 * $Id: send-mp-threshold-alerts,v 1.17 2006-06-10 13:37:03 matthew Exp $
 * 
 */

chdir(dirname($_SERVER['SCRIPT_FILENAME']));
require_once '../conf/general';
require_once '../phplib/fns.php';
require_once '../../phplib/cli.php';
require_once '../../phplib/db.php';
require_once '../../phplib/utility.php';
require_once '../../phplib/person.php';

$short_opts = '';
$long_opts = array('verbose','help');
require_once '../../phplib/phpcli.php';

$switches = $options[0];
$args = $options[1];
foreach ($switches as $switch) {
    if ($switch[0]=='--verbose') $cli_is_verbose = 1;
    if ($switch[0]=='--help') {
?>

YCML MP threshold alert sending script.

Usage: send-mp-threshold-alerts [--verbose]

--help      Display this help message
--verbose   Display more information

<?
        exit;
    }
}

db_connect();
send_mp_threshold_alerts('never-posted');
send_mp_threshold_alerts('has-posted');
send_mp_threshold_alerts('not-interested');

function send_mp_threshold_alerts($type) {
    verbose("sending $type MP threshold alerts");
    if ($type == 'never-posted') {
        $having = 'max(posted) is null';
        $timespan = '1 week';
        $template = 'alert-mp-threshold';
        $nothanks = 'is null';
    } elseif ($type == 'has-posted') {
        $having = 'max(posted) is not null';
        $timespan = '1 month';
        $template = 'alert-mp-threshold-posted';
        $nothanks = 'is null';
    } elseif ($type == 'not-interested') {
        $having = 'max(posted) is null';
        $timespan = '1 year';
        $template = 'alert-mp-threshold-not-interested';
        $nothanks = '';
    } else {
        err('Invalid type!');
        exit;
    }

    db_query("lock table mp_threshold_alert in share mode");

    /* Find out how many MPs and people have used the service, in an attempt to convince
     * others through peer pressure. */
    $num_mps_using = db_getOne('select count(distinct constituency) from message');
    $num_people = db_getOne('select count(distinct person_id) from constituent');
    
    $q = db_query("
            select constituent.constituency,
                -- current # subscribers
                count(distinct(constituent.id)),
                -- current most recent threshold passed
                mp_threshold(count(distinct(constituent.id))::integer, -1),
                -- when last sent
                max(whensent),
                -- number of subscribers when alert last sent
                max(num_subscribers),
                -- threshold when alert last sent
                mp_threshold(max(num_subscribers)::integer, -1),
                -- null if no message sent
                max(posted),
                -- next threshold
                mp_threshold(count(distinct(constituent.id))::integer, +1)
            from constituent left join message
                    on constituent.constituency = message.constituency
                left join mp_threshold_alert
                    on mp_threshold_alert.constituency
                        = constituent.constituency
            where constituent.constituency is not null
            group by constituent.constituency
            having $having
                and count(distinct(constituent.id)) >= 25
                and (max(whensent) is null
                    or max(whensent) < current_timestamp
                                        - '$timespan'::interval)
                and (max(num_subscribers) is null
                    or mp_threshold(count(distinct(constituent.id))::integer, -1)
                        > mp_threshold(max(num_subscribers)::integer, -1))
                and (select status from mp_nothanks
                    where mp_nothanks.constituency = constituent.constituency) $nothanks");

    while (list($constituency, $current, $current_thr, $whenlast, $last,
                    $last_thr, $posted, $next_thr) = db_fetch_row($q)) {
        $area_info = ycml_get_area_info($constituency);
        $rep_info = ycml_get_mp_info($constituency);
                    
        verbose("need to send an alert for ${rep_info['name']} (${area_info['name']}, #$constituency) with $current subscribers (>$current_thr)");
        if (defined($last))
            verbose("last alert was sent $whenlast when there were $last subscribers (>$last_thr)");
        else
            verbose("no previous alert sent for this constituency");

        if (!isset($rep_info['email']) || $rep_info['email'] === '') {
            warning("no email address available for ${rep_info['name']} MP (${area_info['name']}), but need to send threshold alert");
            if ($rep_info['email'] === '')
                error("email address returned by DaDem was blank; should be null");
            continue;
        }
        verbose("email address for this MP is ${rep_info['email']}");

	# Create account for MP if they don't already have one.
	$P = person_get_or_create($rep_info['email'], $rep_info['name']);
        $already_signed = db_getOne("select id from constituent where 
            constituency = ? and person_id = ?
            for update", array( $constituency, $P->id() ) );
        if (!$already_signed) {
            db_query("insert into constituent (
                        person_id, constituency, is_mp,
                        postcode, creation_ipaddr
                    )
                    values (?, ?, ?, ?, ?)", array($P->id(), $constituency, true, '', ''));
            db_commit();
	}
        $already_present = db_getOne("select confirmation_email from constituency where 
            id = ? for update", array($constituency) );
        if (!$already_present) {
            db_query("insert into constituency (id, confirmation_email)
                    values (?, ?)", array($constituency, $rep_info['email']));
            db_commit();
	}
	$url = person_make_signon_url(null, $rep_info['email'], 'GET', OPTION_BASE_URL . '/post/' . $constituency, null);
        $pp = array(
                'message_url' => $url,
                'subscribers' => $current,
                'constituency_name' => $area_info['name'],
                'next_threshold' => $next_thr,
                'mp_name' => $rep_info['name'],
                'mp_forename' => preg_replace('/\s.*$/', '', $rep_info['name']), /* XXX */
                'mps_using' => $num_mps_using,
                'num_people' => $num_people
            );

        $success = ycml_send_email_template($rep_info['email'], $template, $pp);
        if ($success) {
            verbose("mail successfully sent");
            db_query('
                    insert into mp_threshold_alert
                        (constituency, num_subscribers)
                    values (?, ?)', array($constituency, $current));
        } else {
            warning("failed to send mail to ${rep_info['name']} MP (${area_info['name']}) <${rep_info['email']}>");
        }
    }

    db_commit();
}

?>
