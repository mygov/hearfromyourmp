#!/usr/bin/php -q
<?php
/* 
 * send-comment-alerts:
 * Run from cron regularly to send new comment email alerts.
 *
 * Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
 * Email: matthew@mysociety.org. WWW: http://www.mysociety.org/
 *
 * $Id: send-comment-alerts,v 1.9 2007-11-01 19:15:16 matthew Exp $
 *
 */

$short_opts = '';
$long_opts = array('verbose','help');

chdir(dirname($_SERVER['SCRIPT_FILENAME']));
require_once "../conf/general";
/* for some reason phpcli.php has to be included immediately
 * after conf/general or you get an error
 * /usr/share/php/Console/Getopt.php:188: Undefined offset:  1 */
require_once '../../phplib/phpcli.php';

require_once '../phplib/fns.php';
require_once "../phplib/alert.php";
require_once '../../phplib/cli.php';
require_once '../../phplib/db.php';
require_once '../../phplib/utility.php';
require_once 'work-out-site';

$switches = $options[0];
$args = $options[1];
foreach ($switches as $switch) {
    if ($switch[0]=='--verbose') $cli_is_verbose = 1;
    if ($switch[0]=='--help') {
?>

HearFromYourMP comment alert sending script.

Usage: send-comment-alerts [--verbose]

--help      Display this help message
--verbose   Display more information

<?
        exit;
    }
}

db_connect();
send_comment_alerts();

// send_comment_alerts sends alerts for new comments on a message
function send_comment_alerts() {
    verbose("sending comment alerts");

    // Search for alert
    $q = db_query("
            select alert.id as alert_id, alert.person_id, alert.message_id, comment.id as comment_id,
                   comment.content as comment_content,
                   message.subject,
                   person.name as comment_author_name,
                   alerted.name as alerted_name, alerted.email as alerted_email
            from alert
                left join comment on alert.message_id = comment.message
                left join message on alert.message_id = message.id
                left join person on comment.person_id = person.id
                left join person as alerted on alert.person_id = alerted.id
            where
                date >= whensubscribed and
                comment.visible > 0 and
                (select whenqueued from alert_sent where
                    alert_sent.alert_id = alert.id and
                    alert_sent.comment_id = comment.id) is null
                and comment.person_id <> alert.person_id
            order by alert_id, date
            ");

    $data = array();
    while ($row = db_fetch_array($q)) {
        $alert_id = $row['alert_id'];
        verbose("person #${row['person_id']} (${row['alerted_email']}) has alert on message ${row['message_id']} for comment #${row['comment_id']} (by ${row['comment_author_name']})");

        # Grab a lock, making sure alert hasn't been deleted meanwhile
        $stillthere = db_getOne('select id from alert where id = ? for update', $alert_id);
        if (!$stillthere) continue;

        # Check to see if the alert has been sent meanwhile
        $alreadysent = db_getOne('select alert_id from alert_sent where alert_id = ? and comment_id = ?', 
                 array($alert_id, $row['comment_id']));
        if ($alreadysent) continue;

        $data[$alert_id]['comments'][$row['comment_id']] = "$row[comment_author_name]: $row[comment_content]";
        $data[$alert_id]['subject'] = $row['subject'];
        $data[$alert_id]['alerted'] = array($row['alerted_email'], $row['alerted_name']);
        $data[$alert_id]['message_id'] = $row['message_id'];
    }

    foreach ($data as $alert_id => $alert) {
        $comments = $alert['comments'];
        $email = $alert['alerted'][0];

        # Store that alert has been sent
        foreach (array_keys($comments) as $comment_id) {
            db_query("insert into alert_sent (alert_id, comment_id) values (?, ?)", 
                array($alert_id, $comment_id));
        }

        $values = array(
            'subject' => $alert['subject'],
            'alerted_name' => $alert['alerted'][1],
            'comments' => '* ' . join("\n\n* ", array_values($comments)),
            'comment_url' => ycml_make_view_url($alert['message_id'], $email),
            'unsubscribe_url' => alert_unsubscribe_link($alert_id, $email)
        );
        $f = ycml_send_email_template($alert['alerted'], 'alert-comment', $values);
        if (!$f) {
            # Revert record that it has been sent
            db_rollback();
            error("Failed to send comment alert to " . $alerted[$alert_id][0]
                . " alert #" . $alert_id . " comments #" . join(',',  array_keys($comments)));
        } else {
            # Commit that it has been sent
            db_commit();
        }
    }

    verbose("finished sending comment alerts");
}

