#!/usr/bin/php -q
<?php
/* 
 * send-message-alerts:
 * Run from cron regularly to send new message email alerts.
 *
 * Copyright (c) 2005 UK Citizens Online Democracy. All rights reserved.
 * Email: matthew@mysociety.org. WWW: http://www.mysociety.org/
 *
 * $Id: send-message-alerts,v 1.14 2007-10-31 17:15:52 matthew Exp $
 *
 */

chdir(dirname($_SERVER['SCRIPT_FILENAME']));
require_once "../conf/general";
require_once '../phplib/fns.php';
require_once '../phplib/reps.php';
require_once '../phplib/constituent.php';
require_once '../../phplib/cli.php';
require_once '../../phplib/db.php';
require_once '../../phplib/utility.php';
require_once '../../phplib/person.php';

$short_opts = '';
$long_opts = array('verbose','help');
require_once '../../phplib/phpcli.php';

$switches = $options[0];
$args = $options[1];
foreach ($switches as $switch) {
    if ($switch[0]=='--verbose') $cli_is_verbose = 1;
    if ($switch[0]=='--help') {
?>

YCML message alert sending script.

Usage: send-message-alerts [--verbose]

--help      Display this help message
--verbose   Display more information

<?
        exit;
    }
}

db_connect();
send_message_alerts();

// send_message_alerts sends alerts for new messages to YCML
function send_message_alerts() {
    verbose("sending message alerts");

    // Search for alert
    $q = db_query("
            select message.id as message_id, message.area_id,
                    message.subject, message.content, message.rep_id,
                    person.id as person_id, person.name, person.email,
                    constituent.id as constituent_id, constituent.postcode,
                    constituent.is_rep
            from message, constituent, person
            where
                message.state = 'approved' and
                message.area_id = constituent.area_id and
                constituent.person_id = person.id and
                posted >= creation_time and
                (select whenqueued from message_sent where
                    message_sent.person_id = person.id and
                    message_sent.message_id = message.id) is null
            order by posted
            ");

    while ($row = db_fetch_array($q)) {
        verbose("person #${row['person_id']} (${row['email']}) has alert on message ${row['message_id']}");

        $rep_info = ycml_get_rep_info($row['rep_id']);

        # Grab a lock, making sure alert hasn't been deleted meanwhile
        $stillthere = db_getOne('select id from constituent where id = ? for update', $row['constituent_id']);
        if (!$stillthere) continue;

        # Check to see if the alert has been sent meanwhile
        $alreadysent = db_getOne('select person_id from message_sent where person_id = ? and message_id = ?', 
                 array($row['person_id'], $row['message_id']));
        if ($alreadysent) continue;

        # Store that alert has been sent
        db_query("insert into message_sent (person_id, message_id) values (?, ?)", 
                 array($row['person_id'], $row['message_id']));

        # Send email
        $row['rep_name'] = $rep_info['name'];
        $row['message_url'] = ycml_make_view_url($row['message_id'], $row['email']);
        $row['unsubscribe_url'] = constituent_unsubscribe_link($row['constituent_id'], $row['email']);
        $row['writetothem_url'] = 'http://www.writetothem.com/?a='
            . OPTION_AREA_TYPE . '&pc=' . urlencode($row['postcode']);
        if (!OPTION_YCML_STAGING || $row['is_rep']=='f')
            $f = ycml_send_email_template(array($row['email'], $row['name']),
                'alert-message', $row);
        else
            $f = true;
        if (!$f) {
            # Revert record that it has been sent
            db_rollback();
            error("Failed to send message alert to " . $row['email'] . " message #" . $row['message_id']);
        } else {
            # Commit that it has been sent
            db_commit();
        }
    }

    verbose("finished sending message alerts");
}

